// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/components/RootLayout/index.tsx 1`] = `
"import * as React from \\"react\\";
import styled from \\"styled-components\\";
import { RouteProps } from \\"app/route\\";

const Wrapper = styled.div\`
  display: flex;
  flex-direction: row;
\`;
const Nav = styled.div\`
  flex: 0;
  padding: 10px;
  margin: 10px;
  min-width: 300px;
  border: 1px solid lightgreen;
  border-radius: 20px;
\`;
export default class RootLayout extends React.PureComponent<RouteProps> {
  render() {
    return (
      <Wrapper>
        <nav className=\\"flex items-center justify-between flex-wrap bg-teal-500 p-6\\">
          <div className=\\"flex items-center flex-shrink-0 text-white mr-6\\">
            <svg className=\\"fill-current h-8 w-8 mr-2\\" width=\\"54\\" height=\\"54\\" viewBox=\\"0 0 54 54\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05z\\"/></svg>
            <span className=\\"font-semibold text-xl tracking-tight\\">Tailwind CSS</span>
          </div>
          <div className=\\"block lg:hidden\\">
            <button className=\\"flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\\">
              <svg className=\\"fill-current h-3 w-3\\" viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><title>Menu</title><path d=\\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\\"/></svg>
            </button>
          </div>
          <div className=\\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\\">
            <div className=\\"text-sm lg:flex-grow\\">
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\\">
                Docs
              </a>
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\\">
                Examples
              </a>
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white\\">
                Blog
              </a>
            </div>
            <div>
              <a href=\\"#\\" className=\\"inline-block text-sm px-4 py-2 leading-none border rounded text-white border-white hover:border-transparent hover:text-teal-500 hover:bg-white mt-4 lg:mt-0\\">Download</a>
            </div>
          </div>
        </nav>
        <div>{this.props.children}</div>
      </Wrapper>
    );
  }
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/components/testComponent/index.ts 1`] = `
"import { TestComponent } from './testComponent'

export default TestComponent


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/components/testComponent/testComponent.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent} from './testComponent';

storiesOf('app//_components/testComponent', module)
  .add('with text', () => (
    <TestComponent>Hello TestComponent</TestComponent>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/components/testComponent/testComponent.tsx 1`] = `
"import * as React from 'react'

export interface TestcomponentProps {
  children?: React.ReactNode
}
export const TestComponent = (props: TestcomponentProps) => {
  return (
    <div> TestComponent { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/global.css 1`] = `
"

@import url(\\"https://fonts.googleapis.com/css?family=Roboto&display=swap\\");
body {
  font-family: \\"Roboto\\", sans-serif;
}

/***************
We recommend tailwaind.

https://tailwindcss.com/docs/

Checkout the docs ‚òùÔ∏è, and uncomment the following lines
****************/

/*
@tailwind base;

@tailwind components;

@tailwind utilities;
*/
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/ducks/index.ts 1`] = `
"import { testDuck, initialState as testDuckInitialState } from './testDuck/testDuck'
// üëá Add your reducers here üëá
export default {
  testDuck
};

// üëá Add your initial states here üëá
export const initialState = {
  testDuck: testDuckInitialState
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/ducks/testDuck/testDuck.test.ts 1`] = `
"import { initialState, testDuck } from \\"./testDuck\\";

describe(\\"testDuck\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck(initialState, testDuck.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/ducks/testDuck/testDuck.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/testDuck/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/sagas/index.ts 1`] = `
"import { testSaga } from './testSaga'
import { all, call } from \\"redux-saga/effects\\";

/**
 * rootSaga to load any global sagas you want.
 *
 * Included are some common ones, you just need to uncomment them.
 */
export default function* rootSaga() {
  console.log(\\"saga initialized\\");
  yield all([call(testSaga)]);
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/sagas/testSaga.test.ts 1`] = `
"import { testSaga } from './testSaga';

// There are a lot of strategies for testing sagas
// https://redux-saga.js.org/docs/advanced/Testing.html
describe('testSaga',() => {
  it('should exist', () => {
    expect(testSaga).toBeTruthy()
  })
})
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/sagas/testSaga.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/selectors/index.ts 1`] = `
"import { createSelector } from 'reselect'
import app from '../..'

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import {
  createApp,
  createStore,
  IRouteComponentProps,
  createRouteComposer
} from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";
import \\"./global.css\\";

export type RouteParams = {}
export type RouteProps = IRouteComponentProps<RouteParams>;
export const route = createRouteComposer<RouteParams>(\\"/\\");

export const {store,...bundle} = createStore({
  initialState,
  initialReducers,
});

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    store,
    ...bundle,
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/readme.md 1`] = `
"
# Routes
\`routes\` is a folder for holding other routes, which follows the
[fractal pattern](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af).

Each route contains:
  * a \`routes\` folder for sub routes.
  * a \`components\` folder for react components for this route.
  * a \`redux\` folder, for
    [ducks](https://github.com/erikras/ducks-modular-redux),
    [sagas](https://redux-saga.js.org/), and anything else related to redux.
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/components/testComponent2/index.ts 1`] = `
"import { TestComponent2 } from './testComponent2'

export default TestComponent2


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent2} from './testComponent2';

storiesOf('app/testRoute/_components/testComponent2', module)
  .add('with text', () => (
    <TestComponent2>Hello TestComponent2</TestComponent2>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx 1`] = `
"import * as React from 'react'

export interface Testcomponent2Props {
  children?: React.ReactNode
}
export const TestComponent2 = (props: Testcomponent2Props) => {
  return (
    <div> TestComponent2 { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/index.ts 1`] = `
"import parent from '../../'
import testRouteRoute from './route'
export default testRouteRoute(parent)
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface TestrouteProps extends RouteProps {}

const testRouteLayout = (props: TestrouteProps) => (
  <div>
    <h1>testRoute</h1>
    { props.children }
  </div>
)
export default testRouteLayout;
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/redux/ducks/index.ts 1`] = `
"import { testDuck2, initialState as testDuck2InitialState } from './testDuck2/testDuck2'
/**
 * Run \`apr g duck --route src\` to add a duck
 */
export default {
 testDuck2
};
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.test.ts 1`] = `
"import { initialState, testDuck2 } from \\"./testDuck2\\";

describe(\\"testDuck2\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck2(initialState, testDuck2.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/routes/testRoute/testDuck2/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck2 = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/redux/sagas/index.ts 1`] = `
"import { testSaga2 } from './testSaga2'
import { all, call } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([call(testSaga2)]);
}

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.test.ts 1`] = `
"import { testSaga2 } from './testSaga2';

// There are a lot of strategies for testing sagas
// https://redux-saga.js.org/docs/advanced/Testing.html
describe('testSaga2',() => {
  it('should exist', () => {
    expect(testSaga2).toBeTruthy()
  })
})
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga2 () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/redux/selectors/index.ts 1`] = `
"import testRoute from './testRoute';
export default testRoute;
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRouteRoute from \\"./route\\";

export const route = testRouteRoute(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"app/testRoute\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRouteRoute = (app: RouteParent) => {
  const testRouteRoute = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRouteRoute.setComponent(() => import('./layout'))
  testRouteRoute.register()
  return testRouteRoute;
}

export default testRouteRoute
export type Parent = ReturnType<typeof testRouteRoute>

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts 1`] = `
"import { TestComponent3 } from './testComponent3'

export default TestComponent3


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent3} from './testComponent3';

storiesOf('app/testRoute/testRoute2/_components/testComponent3', module)
  .add('with text', () => (
    <TestComponent3>Hello TestComponent3</TestComponent3>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx 1`] = `
"import * as React from 'react'

export interface Testcomponent3Props {
  children?: React.ReactNode
}
export const TestComponent3 = (props: Testcomponent3Props) => {
  return (
    <div> TestComponent3 { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts 1`] = `
"import parent from '../../'
import testRoute2Route from './route'
export default testRoute2Route(parent)
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface Testroute2Props extends RouteProps {}

const testRoute2Layout = (props: Testroute2Props) => (
  <div>
    <h1>testRoute2</h1>
    { props.children }
  </div>
)
export default testRoute2Layout;
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts 1`] = `
"import { testDuck3, initialState as testDuck3InitialState } from './testDuck3/testDuck3'
/**
 * Run \`apr g duck --route src/routes/testRoute\` to add a duck
 */
export default {
 testDuck3
};
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.test.ts 1`] = `
"import { initialState, testDuck3 } from \\"./testDuck3\\";

describe(\\"testDuck3\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck3(initialState, testDuck3.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/routes/testRoute/routes/testRoute2/testDuck3/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck3 = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts 1`] = `
"import { all } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([
  ]);
}

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts 1`] = `
"import testRoute2 from './testRoute2';
export default testRoute2;
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRoute2Route from \\"./route\\";

export const route = testRoute2Route(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"apptestRoute/testRoute2\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute2'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRoute2Route = (app: RouteParent) => {
  const testRoute2Route = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRoute2Route.setComponent(() => import('./layout'))
  testRoute2Route.register()
  return testRoute2Route;
}

export default testRoute2Route
export type Parent = ReturnType<typeof testRoute2Route>

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts 1`] = `
"import parent from '../../'
import testRoute3Route from './route'
export default testRoute3Route(parent)
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface Testroute3Props extends RouteProps {}

const testRoute3Layout = (props: Testroute3Props) => (
  <div>
    <h1>testRoute3</h1>
    { props.children }
  </div>
)
export default testRoute3Layout;
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts 1`] = `
"/**
 * Run \`apr g duck --route src/routes/testRoute/routes/testRoute2\` to add a duck
 */
export default {}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts 1`] = `
"import { all } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([
  ]);
}

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts 1`] = `
"import testRoute3 from './testRoute3';
export default testRoute3;
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRoute3Route from \\"./route\\";

export const route = testRoute3Route(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"apptestRoute/testRoute2/testRoute3\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute3'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRoute3Route = (app: RouteParent) => {
  const testRoute3Route = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRoute3Route.setComponent(() => import('./layout'))
  testRoute3Route.register()
  return testRoute3Route;
}

export default testRoute3Route
export type Parent = ReturnType<typeof testRoute3Route>

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/stories.test.ts 1`] = `
"import initStoryshots, {
  multiSnapshotWithOptions
} from '@storybook/addon-storyshots'

initStoryshots({
  integrityOptions: { cwd: __dirname },
  test: multiSnapshotWithOptions({})
})
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/ui/readme.md 1`] = `
"# UI
\`ui\` is for reusable components, which should have 0 concept of anything else
 that is in your app.

## Examples
### Components that belong in ui.
UI components should be simple, pure, and require no context of the application.
Try to imagine that one day, you want to publish an npm package, based on your
ui elements. It should be as easy as copying this folder, and putting a
package.json file in it (and maybe a build system). Think of this as your own
personal bootstrap.
  * Button - simple ui component. It requires no context, or anything to
    be loaded in your app.
  * Grid - Meta component for arranging other components or children
  * Form inputs - keep your UI consistent by defining form inputs here.
  * Avatar - Takes an image, and creates a specific size.
  * Loader - Spinner or progress bar to show throughout the application.

### Components that do not belong in ui.
UI components that are specific to something in your application belong in
components.
  * UserAvatar - maybe it contains a link to user profiles, has knowledge of the
    user model, etc...
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/ui/testUi/index.ts 1`] = `
"import { TestUi } from './testUi'

export default TestUi


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/ui/testUi/testUi.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestUi} from './testUi';

storiesOf('ui/testUi', module)
  .add('with text', () => (
    <TestUi>Hello TestUi</TestUi>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/ui/testUi/testUi.tsx 1`] = `
"import * as React from 'react'

export interface TestuiProps {
  children?: React.ReactNode
}
export const TestUi = (props: TestuiProps) => {
  return (
    <div> TestUi { props.children } </div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes: apr g saga --name testSaga2 --route src/routes/testRoute --autoLink 1`] = `
",
Loaded templates: <project-root>packages/apr-cli/_templates/
       added: src/routes/testRoute/redux/sagas/testSaga2.ts
       added: src/routes/testRoute/redux/sagas/testSaga2.test.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga based on testRoutes: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/global.css",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.test.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.test.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.test.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.test.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.test.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/stories.test.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/components/RootLayout/index.tsx 1`] = `
"import * as React from \\"react\\";
import styled from \\"styled-components\\";
import { RouteProps } from \\"app/route\\";

const Wrapper = styled.div\`
  display: flex;
  flex-direction: row;
\`;
const Nav = styled.div\`
  flex: 0;
  padding: 10px;
  margin: 10px;
  min-width: 300px;
  border: 1px solid lightgreen;
  border-radius: 20px;
\`;
export default class RootLayout extends React.PureComponent<RouteProps> {
  render() {
    return (
      <Wrapper>
        <nav className=\\"flex items-center justify-between flex-wrap bg-teal-500 p-6\\">
          <div className=\\"flex items-center flex-shrink-0 text-white mr-6\\">
            <svg className=\\"fill-current h-8 w-8 mr-2\\" width=\\"54\\" height=\\"54\\" viewBox=\\"0 0 54 54\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05z\\"/></svg>
            <span className=\\"font-semibold text-xl tracking-tight\\">Tailwind CSS</span>
          </div>
          <div className=\\"block lg:hidden\\">
            <button className=\\"flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\\">
              <svg className=\\"fill-current h-3 w-3\\" viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><title>Menu</title><path d=\\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\\"/></svg>
            </button>
          </div>
          <div className=\\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\\">
            <div className=\\"text-sm lg:flex-grow\\">
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\\">
                Docs
              </a>
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\\">
                Examples
              </a>
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white\\">
                Blog
              </a>
            </div>
            <div>
              <a href=\\"#\\" className=\\"inline-block text-sm px-4 py-2 leading-none border rounded text-white border-white hover:border-transparent hover:text-teal-500 hover:bg-white mt-4 lg:mt-0\\">Download</a>
            </div>
          </div>
        </nav>
        <div>{this.props.children}</div>
      </Wrapper>
    );
  }
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/components/testComponent/index.ts 1`] = `
"import { TestComponent } from './testComponent'

export default TestComponent


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/components/testComponent/testComponent.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent} from './testComponent';

storiesOf('app//_components/testComponent', module)
  .add('with text', () => (
    <TestComponent>Hello TestComponent</TestComponent>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/components/testComponent/testComponent.tsx 1`] = `
"import * as React from 'react'

export interface TestcomponentProps {
  children?: React.ReactNode
}
export const TestComponent = (props: TestcomponentProps) => {
  return (
    <div> TestComponent { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/global.css 1`] = `
"

@import url(\\"https://fonts.googleapis.com/css?family=Roboto&display=swap\\");
body {
  font-family: \\"Roboto\\", sans-serif;
}

/***************
We recommend tailwaind.

https://tailwindcss.com/docs/

Checkout the docs ‚òùÔ∏è, and uncomment the following lines
****************/

/*
@tailwind base;

@tailwind components;

@tailwind utilities;
*/
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/redux/ducks/index.ts 1`] = `
"import { testDuck, initialState as testDuckInitialState } from './testDuck/testDuck'
// üëá Add your reducers here üëá
export default {
  testDuck
};

// üëá Add your initial states here üëá
export const initialState = {
  testDuck: testDuckInitialState
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/redux/ducks/testDuck/testDuck.test.ts 1`] = `
"import { initialState, testDuck } from \\"./testDuck\\";

describe(\\"testDuck\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck(initialState, testDuck.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/redux/ducks/testDuck/testDuck.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/testDuck/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/redux/sagas/index.ts 1`] = `
"import { testSaga } from './testSaga'
import { all, call } from \\"redux-saga/effects\\";

/**
 * rootSaga to load any global sagas you want.
 *
 * Included are some common ones, you just need to uncomment them.
 */
export default function* rootSaga() {
  console.log(\\"saga initialized\\");
  yield all([call(testSaga)]);
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/redux/sagas/testSaga.test.ts 1`] = `
"import { testSaga } from './testSaga';

// There are a lot of strategies for testing sagas
// https://redux-saga.js.org/docs/advanced/Testing.html
describe('testSaga',() => {
  it('should exist', () => {
    expect(testSaga).toBeTruthy()
  })
})
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/redux/sagas/testSaga.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/redux/selectors/index.ts 1`] = `
"import { createSelector } from 'reselect'
import app from '../..'

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import {
  createApp,
  createStore,
  IRouteComponentProps,
  createRouteComposer
} from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";
import \\"./global.css\\";

export type RouteParams = {}
export type RouteProps = IRouteComponentProps<RouteParams>;
export const route = createRouteComposer<RouteParams>(\\"/\\");

export const {store,...bundle} = createStore({
  initialState,
  initialReducers,
});

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    store,
    ...bundle,
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/readme.md 1`] = `
"
# Routes
\`routes\` is a folder for holding other routes, which follows the
[fractal pattern](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af).

Each route contains:
  * a \`routes\` folder for sub routes.
  * a \`components\` folder for react components for this route.
  * a \`redux\` folder, for
    [ducks](https://github.com/erikras/ducks-modular-redux),
    [sagas](https://redux-saga.js.org/), and anything else related to redux.
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/components/testComponent2/index.ts 1`] = `
"import { TestComponent2 } from './testComponent2'

export default TestComponent2


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent2} from './testComponent2';

storiesOf('app/testRoute/_components/testComponent2', module)
  .add('with text', () => (
    <TestComponent2>Hello TestComponent2</TestComponent2>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx 1`] = `
"import * as React from 'react'

export interface Testcomponent2Props {
  children?: React.ReactNode
}
export const TestComponent2 = (props: Testcomponent2Props) => {
  return (
    <div> TestComponent2 { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/index.ts 1`] = `
"import parent from '../../'
import testRouteRoute from './route'
export default testRouteRoute(parent)
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface TestrouteProps extends RouteProps {}

const testRouteLayout = (props: TestrouteProps) => (
  <div>
    <h1>testRoute</h1>
    { props.children }
  </div>
)
export default testRouteLayout;
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/ducks/index.ts 1`] = `
"import { testDuck2, initialState as testDuck2InitialState } from './testDuck2/testDuck2'
/**
 * Run \`apr g duck --route src\` to add a duck
 */
export default {
 testDuck2
};
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.test.ts 1`] = `
"import { initialState, testDuck2 } from \\"./testDuck2\\";

describe(\\"testDuck2\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck2(initialState, testDuck2.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/routes/testRoute/testDuck2/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck2 = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/sagas/index.ts 1`] = `
"import { testSaga2 } from './testSaga2'
import { all, call } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([call(testSaga2)]);
}

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.test.ts 1`] = `
"import { testSaga2 } from './testSaga2';

// There are a lot of strategies for testing sagas
// https://redux-saga.js.org/docs/advanced/Testing.html
describe('testSaga2',() => {
  it('should exist', () => {
    expect(testSaga2).toBeTruthy()
  })
})
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga2 () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/selectors/index.ts 1`] = `
"import testRoute from './testRoute';
export default testRoute;
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRouteRoute from \\"./route\\";

export const route = testRouteRoute(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"app/testRoute\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRouteRoute = (app: RouteParent) => {
  const testRouteRoute = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRouteRoute.setComponent(() => import('./layout'))
  testRouteRoute.register()
  return testRouteRoute;
}

export default testRouteRoute
export type Parent = ReturnType<typeof testRouteRoute>

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts 1`] = `
"import { TestComponent3 } from './testComponent3'

export default TestComponent3


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent3} from './testComponent3';

storiesOf('app/testRoute/testRoute2/_components/testComponent3', module)
  .add('with text', () => (
    <TestComponent3>Hello TestComponent3</TestComponent3>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx 1`] = `
"import * as React from 'react'

export interface Testcomponent3Props {
  children?: React.ReactNode
}
export const TestComponent3 = (props: Testcomponent3Props) => {
  return (
    <div> TestComponent3 { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts 1`] = `
"import parent from '../../'
import testRoute2Route from './route'
export default testRoute2Route(parent)
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface Testroute2Props extends RouteProps {}

const testRoute2Layout = (props: Testroute2Props) => (
  <div>
    <h1>testRoute2</h1>
    { props.children }
  </div>
)
export default testRoute2Layout;
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts 1`] = `
"import { testDuck3, initialState as testDuck3InitialState } from './testDuck3/testDuck3'
/**
 * Run \`apr g duck --route src/routes/testRoute\` to add a duck
 */
export default {
 testDuck3
};
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.test.ts 1`] = `
"import { initialState, testDuck3 } from \\"./testDuck3\\";

describe(\\"testDuck3\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck3(initialState, testDuck3.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/routes/testRoute/routes/testRoute2/testDuck3/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck3 = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts 1`] = `
"import { testSaga3 } from './testSaga3'
import { all, call } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([call(testSaga3)]);
}

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.test.ts 1`] = `
"import { testSaga3 } from './testSaga3';

// There are a lot of strategies for testing sagas
// https://redux-saga.js.org/docs/advanced/Testing.html
describe('testSaga3',() => {
  it('should exist', () => {
    expect(testSaga3).toBeTruthy()
  })
})
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga3 () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts 1`] = `
"import testRoute2 from './testRoute2';
export default testRoute2;
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRoute2Route from \\"./route\\";

export const route = testRoute2Route(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"apptestRoute/testRoute2\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute2'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRoute2Route = (app: RouteParent) => {
  const testRoute2Route = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRoute2Route.setComponent(() => import('./layout'))
  testRoute2Route.register()
  return testRoute2Route;
}

export default testRoute2Route
export type Parent = ReturnType<typeof testRoute2Route>

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts 1`] = `
"import parent from '../../'
import testRoute3Route from './route'
export default testRoute3Route(parent)
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface Testroute3Props extends RouteProps {}

const testRoute3Layout = (props: Testroute3Props) => (
  <div>
    <h1>testRoute3</h1>
    { props.children }
  </div>
)
export default testRoute3Layout;
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts 1`] = `
"/**
 * Run \`apr g duck --route src/routes/testRoute/routes/testRoute2\` to add a duck
 */
export default {}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts 1`] = `
"import { all } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([
  ]);
}

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts 1`] = `
"import testRoute3 from './testRoute3';
export default testRoute3;
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRoute3Route from \\"./route\\";

export const route = testRoute3Route(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"apptestRoute/testRoute2/testRoute3\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute3'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRoute3Route = (app: RouteParent) => {
  const testRoute3Route = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRoute3Route.setComponent(() => import('./layout'))
  testRoute3Route.register()
  return testRoute3Route;
}

export default testRoute3Route
export type Parent = ReturnType<typeof testRoute3Route>

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/stories.test.ts 1`] = `
"import initStoryshots, {
  multiSnapshotWithOptions
} from '@storybook/addon-storyshots'

initStoryshots({
  integrityOptions: { cwd: __dirname },
  test: multiSnapshotWithOptions({})
})
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/ui/readme.md 1`] = `
"# UI
\`ui\` is for reusable components, which should have 0 concept of anything else
 that is in your app.

## Examples
### Components that belong in ui.
UI components should be simple, pure, and require no context of the application.
Try to imagine that one day, you want to publish an npm package, based on your
ui elements. It should be as easy as copying this folder, and putting a
package.json file in it (and maybe a build system). Think of this as your own
personal bootstrap.
  * Button - simple ui component. It requires no context, or anything to
    be loaded in your app.
  * Grid - Meta component for arranging other components or children
  * Form inputs - keep your UI consistent by defining form inputs here.
  * Avatar - Takes an image, and creates a specific size.
  * Loader - Spinner or progress bar to show throughout the application.

### Components that do not belong in ui.
UI components that are specific to something in your application belong in
components.
  * UserAvatar - maybe it contains a link to user profiles, has knowledge of the
    user model, etc...
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/ui/testUi/index.ts 1`] = `
"import { TestUi } from './testUi'

export default TestUi


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/ui/testUi/testUi.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestUi} from './testUi';

storiesOf('ui/testUi', module)
  .add('with text', () => (
    <TestUi>Hello TestUi</TestUi>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/ui/testUi/testUi.tsx 1`] = `
"import * as React from 'react'

export interface TestuiProps {
  children?: React.ReactNode
}
export const TestUi = (props: TestuiProps) => {
  return (
    <div> TestUi { props.children } </div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: apr g saga --name testSaga3 --route src/routes/testRoute/routes/testRoute2 --autoLink 1`] = `
",
Loaded templates: <project-root>packages/apr-cli/_templates/
       added: src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.ts
       added: src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.test.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/global.css",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.test.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.test.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.test.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.test.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.test.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.test.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/stories.test.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/components/RootLayout/index.tsx 1`] = `
"import * as React from \\"react\\";
import styled from \\"styled-components\\";
import { RouteProps } from \\"app/route\\";

const Wrapper = styled.div\`
  display: flex;
  flex-direction: row;
\`;
const Nav = styled.div\`
  flex: 0;
  padding: 10px;
  margin: 10px;
  min-width: 300px;
  border: 1px solid lightgreen;
  border-radius: 20px;
\`;
export default class RootLayout extends React.PureComponent<RouteProps> {
  render() {
    return (
      <Wrapper>
        <nav className=\\"flex items-center justify-between flex-wrap bg-teal-500 p-6\\">
          <div className=\\"flex items-center flex-shrink-0 text-white mr-6\\">
            <svg className=\\"fill-current h-8 w-8 mr-2\\" width=\\"54\\" height=\\"54\\" viewBox=\\"0 0 54 54\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05z\\"/></svg>
            <span className=\\"font-semibold text-xl tracking-tight\\">Tailwind CSS</span>
          </div>
          <div className=\\"block lg:hidden\\">
            <button className=\\"flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\\">
              <svg className=\\"fill-current h-3 w-3\\" viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><title>Menu</title><path d=\\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\\"/></svg>
            </button>
          </div>
          <div className=\\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\\">
            <div className=\\"text-sm lg:flex-grow\\">
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\\">
                Docs
              </a>
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\\">
                Examples
              </a>
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white\\">
                Blog
              </a>
            </div>
            <div>
              <a href=\\"#\\" className=\\"inline-block text-sm px-4 py-2 leading-none border rounded text-white border-white hover:border-transparent hover:text-teal-500 hover:bg-white mt-4 lg:mt-0\\">Download</a>
            </div>
          </div>
        </nav>
        <div>{this.props.children}</div>
      </Wrapper>
    );
  }
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/components/testComponent/index.ts 1`] = `
"import { TestComponent } from './testComponent'

export default TestComponent


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/components/testComponent/testComponent.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent} from './testComponent';

storiesOf('app//_components/testComponent', module)
  .add('with text', () => (
    <TestComponent>Hello TestComponent</TestComponent>
  ));
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/components/testComponent/testComponent.tsx 1`] = `
"import * as React from 'react'

export interface TestcomponentProps {
  children?: React.ReactNode
}
export const TestComponent = (props: TestcomponentProps) => {
  return (
    <div> TestComponent { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/global.css 1`] = `
"

@import url(\\"https://fonts.googleapis.com/css?family=Roboto&display=swap\\");
body {
  font-family: \\"Roboto\\", sans-serif;
}

/***************
We recommend tailwaind.

https://tailwindcss.com/docs/

Checkout the docs ‚òùÔ∏è, and uncomment the following lines
****************/

/*
@tailwind base;

@tailwind components;

@tailwind utilities;
*/
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/redux/ducks/index.ts 1`] = `
"import { testDuck, initialState as testDuckInitialState } from './testDuck/testDuck'
// üëá Add your reducers here üëá
export default {
  testDuck
};

// üëá Add your initial states here üëá
export const initialState = {
  testDuck: testDuckInitialState
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/redux/ducks/testDuck/testDuck.test.ts 1`] = `
"import { initialState, testDuck } from \\"./testDuck\\";

describe(\\"testDuck\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck(initialState, testDuck.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/redux/ducks/testDuck/testDuck.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/testDuck/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/redux/sagas/index.ts 1`] = `
"import { testSaga } from './testSaga'
import { all, call } from \\"redux-saga/effects\\";

/**
 * rootSaga to load any global sagas you want.
 *
 * Included are some common ones, you just need to uncomment them.
 */
export default function* rootSaga() {
  console.log(\\"saga initialized\\");
  yield all([call(testSaga)]);
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/redux/sagas/testSaga.test.ts 1`] = `
"import { testSaga } from './testSaga';

// There are a lot of strategies for testing sagas
// https://redux-saga.js.org/docs/advanced/Testing.html
describe('testSaga',() => {
  it('should exist', () => {
    expect(testSaga).toBeTruthy()
  })
})
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/redux/sagas/testSaga.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/redux/selectors/index.ts 1`] = `
"import { createSelector } from 'reselect'
import app from '../..'

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import {
  createApp,
  createStore,
  IRouteComponentProps,
  createRouteComposer
} from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";
import \\"./global.css\\";

export type RouteParams = {}
export type RouteProps = IRouteComponentProps<RouteParams>;
export const route = createRouteComposer<RouteParams>(\\"/\\");

export const {store,...bundle} = createStore({
  initialState,
  initialReducers,
});

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    store,
    ...bundle,
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/readme.md 1`] = `
"
# Routes
\`routes\` is a folder for holding other routes, which follows the
[fractal pattern](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af).

Each route contains:
  * a \`routes\` folder for sub routes.
  * a \`components\` folder for react components for this route.
  * a \`redux\` folder, for
    [ducks](https://github.com/erikras/ducks-modular-redux),
    [sagas](https://redux-saga.js.org/), and anything else related to redux.
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/components/testComponent2/index.ts 1`] = `
"import { TestComponent2 } from './testComponent2'

export default TestComponent2


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent2} from './testComponent2';

storiesOf('app/testRoute/_components/testComponent2', module)
  .add('with text', () => (
    <TestComponent2>Hello TestComponent2</TestComponent2>
  ));
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx 1`] = `
"import * as React from 'react'

export interface Testcomponent2Props {
  children?: React.ReactNode
}
export const TestComponent2 = (props: Testcomponent2Props) => {
  return (
    <div> TestComponent2 { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/index.ts 1`] = `
"import parent from '../../'
import testRouteRoute from './route'
export default testRouteRoute(parent)
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface TestrouteProps extends RouteProps {}

const testRouteLayout = (props: TestrouteProps) => (
  <div>
    <h1>testRoute</h1>
    { props.children }
  </div>
)
export default testRouteLayout;
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/redux/ducks/index.ts 1`] = `
"import { testDuck2, initialState as testDuck2InitialState } from './testDuck2/testDuck2'
/**
 * Run \`apr g duck --route src\` to add a duck
 */
export default {
 testDuck2
};
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.test.ts 1`] = `
"import { initialState, testDuck2 } from \\"./testDuck2\\";

describe(\\"testDuck2\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck2(initialState, testDuck2.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/routes/testRoute/testDuck2/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck2 = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/redux/sagas/index.ts 1`] = `
"import { all } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([
  ]);
}

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/redux/selectors/index.ts 1`] = `
"import testRoute from './testRoute';
export default testRoute;
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRouteRoute from \\"./route\\";

export const route = testRouteRoute(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"app/testRoute\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRouteRoute = (app: RouteParent) => {
  const testRouteRoute = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRouteRoute.setComponent(() => import('./layout'))
  testRouteRoute.register()
  return testRouteRoute;
}

export default testRouteRoute
export type Parent = ReturnType<typeof testRouteRoute>

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts 1`] = `
"import { TestComponent3 } from './testComponent3'

export default TestComponent3


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent3} from './testComponent3';

storiesOf('app/testRoute/testRoute2/_components/testComponent3', module)
  .add('with text', () => (
    <TestComponent3>Hello TestComponent3</TestComponent3>
  ));
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx 1`] = `
"import * as React from 'react'

export interface Testcomponent3Props {
  children?: React.ReactNode
}
export const TestComponent3 = (props: Testcomponent3Props) => {
  return (
    <div> TestComponent3 { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts 1`] = `
"import parent from '../../'
import testRoute2Route from './route'
export default testRoute2Route(parent)
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface Testroute2Props extends RouteProps {}

const testRoute2Layout = (props: Testroute2Props) => (
  <div>
    <h1>testRoute2</h1>
    { props.children }
  </div>
)
export default testRoute2Layout;
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts 1`] = `
"import { testDuck3, initialState as testDuck3InitialState } from './testDuck3/testDuck3'
/**
 * Run \`apr g duck --route src/routes/testRoute\` to add a duck
 */
export default {
 testDuck3
};
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.test.ts 1`] = `
"import { initialState, testDuck3 } from \\"./testDuck3\\";

describe(\\"testDuck3\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck3(initialState, testDuck3.actionCreators.reset()));
  });
});
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/routes/testRoute/routes/testRoute2/testDuck3/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck3 = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts 1`] = `
"import { all } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([
  ]);
}

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts 1`] = `
"import testRoute2 from './testRoute2';
export default testRoute2;
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRoute2Route from \\"./route\\";

export const route = testRoute2Route(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"apptestRoute/testRoute2\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute2'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRoute2Route = (app: RouteParent) => {
  const testRoute2Route = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRoute2Route.setComponent(() => import('./layout'))
  testRoute2Route.register()
  return testRoute2Route;
}

export default testRoute2Route
export type Parent = ReturnType<typeof testRoute2Route>

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts 1`] = `
"import parent from '../../'
import testRoute3Route from './route'
export default testRoute3Route(parent)
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx 1`] = `
"import * as React from 'react'
import { RouteProps } from './route'
interface Testroute3Props extends RouteProps {}

const testRoute3Layout = (props: Testroute3Props) => (
  <div>
    <h1>testRoute3</h1>
    { props.children }
  </div>
)
export default testRoute3Layout;
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts 1`] = `
"/**
 * Run \`apr g duck --route src/routes/testRoute/routes/testRoute2\` to add a duck
 */
export default {}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts 1`] = `
"import { all } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([
  ]);
}

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts 1`] = `
"import testRoute3 from './testRoute3';
export default testRoute3;
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRoute3Route from \\"./route\\";

export const route = testRoute3Route(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"apptestRoute/testRoute2/testRoute3\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts 1`] = `
"import { createRouteComposer, IRouteComponentProps, combineRoutes } from 'action-packed-react';
import {
  Parent as RouteParent,
  route as parentRoute,
  RouteParams as ParentRouteParams
} from '../../route';

export type RouteParams = ParentRouteParams & {};
export const route = combineRoutes(parentRoute, createRouteComposer<RouteParams>('testRoute3'))
export type RouteProps = IRouteComponentProps<RouteParams>
const testRoute3Route = (app: RouteParent) => {
  const testRoute3Route = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRoute3Route.setComponent(() => import('./layout'))
  testRoute3Route.register()
  return testRoute3Route;
}

export default testRoute3Route
export type Parent = ReturnType<typeof testRoute3Route>

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/stories.test.ts 1`] = `
"import initStoryshots, {
  multiSnapshotWithOptions
} from '@storybook/addon-storyshots'

initStoryshots({
  integrityOptions: { cwd: __dirname },
  test: multiSnapshotWithOptions({})
})
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/ui/readme.md 1`] = `
"# UI
\`ui\` is for reusable components, which should have 0 concept of anything else
 that is in your app.

## Examples
### Components that belong in ui.
UI components should be simple, pure, and require no context of the application.
Try to imagine that one day, you want to publish an npm package, based on your
ui elements. It should be as easy as copying this folder, and putting a
package.json file in it (and maybe a build system). Think of this as your own
personal bootstrap.
  * Button - simple ui component. It requires no context, or anything to
    be loaded in your app.
  * Grid - Meta component for arranging other components or children
  * Form inputs - keep your UI consistent by defining form inputs here.
  * Avatar - Takes an image, and creates a specific size.
  * Loader - Spinner or progress bar to show throughout the application.

### Components that do not belong in ui.
UI components that are specific to something in your application belong in
components.
  * UserAvatar - maybe it contains a link to user profiles, has knowledge of the
    user model, etc...
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/ui/testUi/index.ts 1`] = `
"import { TestUi } from './testUi'

export default TestUi


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/ui/testUi/testUi.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestUi} from './testUi';

storiesOf('ui/testUi', module)
  .add('with text', () => (
    <TestUi>Hello TestUi</TestUi>
  ));
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/ui/testUi/testUi.tsx 1`] = `
"import * as React from 'react'

export interface TestuiProps {
  children?: React.ReactNode
}
export const TestUi = (props: TestuiProps) => {
  return (
    <div> TestUi { props.children } </div>
  )
}


"
`;

exports[`generating saga should generate a new saga: apr g saga --name testSaga --route src --autoLink 1`] = `
",
Loaded templates: <project-root>packages/apr-cli/_templates/
       added: src/redux/sagas/testSaga.ts
       added: src/redux/sagas/testSaga.test.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/global.css",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.test.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.test.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.test.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.test.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/stories.test.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;
