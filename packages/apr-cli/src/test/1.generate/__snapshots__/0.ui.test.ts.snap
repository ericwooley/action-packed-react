// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generating ui should generate a new ui component: <project-root>playground/src/components/RootLayout/index.tsx 1`] = `
"import * as React from \\"react\\";
import styled from \\"styled-components\\";
const Wrapper = styled.div\`
  display: flex;
  flex-direction: row;
\`;
const Nav = styled.div\`
  flex: 0;
  padding: 10px;
  margin: 10px;
  min-width: 300px;
  border: 1px solid lightgreen;
  border-radius: 20px;
\`;
export default class RootLayout extends React.PureComponent {
  render() {
    return (
      <Wrapper>
        <nav className=\\"flex items-center justify-between flex-wrap bg-teal-500 p-6\\">
          <div className=\\"flex items-center flex-shrink-0 text-white mr-6\\">
            <svg className=\\"fill-current h-8 w-8 mr-2\\" width=\\"54\\" height=\\"54\\" viewBox=\\"0 0 54 54\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05z\\"/></svg>
            <span className=\\"font-semibold text-xl tracking-tight\\">Tailwind CSS</span>
          </div>
          <div className=\\"block lg:hidden\\">
            <button className=\\"flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\\">
              <svg className=\\"fill-current h-3 w-3\\" viewBox=\\"0 0 20 20\\" xmlns=\\"http://www.w3.org/2000/svg\\"><title>Menu</title><path d=\\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\\"/></svg>
            </button>
          </div>
          <div className=\\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\\">
            <div className=\\"text-sm lg:flex-grow\\">
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\\">
                Docs
              </a>
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\\">
                Examples
              </a>
              <a href=\\"#responsive-header\\" className=\\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white\\">
                Blog
              </a>
            </div>
            <div>
              <a href=\\"#\\" className=\\"inline-block text-sm px-4 py-2 leading-none border rounded text-white border-white hover:border-transparent hover:text-teal-500 hover:bg-white mt-4 lg:mt-0\\">Download</a>
            </div>
          </div>
        </nav>
        <div>{this.props.children}</div>
      </Wrapper>
    );
  }
}
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/global.css 1`] = `
"

@import url(\\"https://fonts.googleapis.com/css?family=Roboto&display=swap\\");
body {
  font-family: \\"Roboto\\", sans-serif;
}

/***************
We recommend tailwaind.

https://tailwindcss.com/docs/

Checkout the docs ‚òùÔ∏è, and uncomment the following lines
****************/

/*
@tailwind base;

@tailwind components;

@tailwind utilities;
*/
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/ducks/index.ts 1`] = `
"// üëá Add your reducers here üëá
export default {}

// üëá Add your initial states here üëá
export const initialState = {

}
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/sagas/index.ts 1`] = `
"import { all } from \\"redux-saga/effects\\";

/**
 * rootSaga to load any global sagas you want.
 *
 * Included are some common ones, you just need to uncomment them.
 */
export default function* rootSaga() {
  console.log(\\"saga initialized\\");
  yield all([
  ]);
}
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/selectors/index.ts 1`] = `
"import { createSelector } from 'reselect'
import app from '../..'

"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import { createApp } from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";
import \\"./global.css\\"

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    initialState,
    initialReducers,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/readme.md 1`] = `
"
# Routes
\`routes\` is a folder for holding other routes, which follows the
[fractal pattern](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af).

Each route contains:
  * a \`routes\` folder for sub routes.
  * a \`components\` folder for react components for this route.
  * a \`redux\` folder, for
    [ducks](https://github.com/erikras/ducks-modular-redux),
    [sagas](https://redux-saga.js.org/), and anything else related to redux.
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/stories.test.ts 1`] = `
"import initStoryshots, {
  multiSnapshotWithOptions
} from '@storybook/addon-storyshots'

initStoryshots({
  integrityOptions: { cwd: __dirname },
  test: multiSnapshotWithOptions({})
})
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/ui/readme.md 1`] = `
"# UI
\`ui\` is for reusable components, which should have 0 concept of anything else
 that is in your app.

## Examples
### Components that belong in ui.
UI components should be simple, pure, and require no context of the application.
Try to imagine that one day, you want to publish an npm package, based on your
ui elements. It should be as easy as copying this folder, and putting a
package.json file in it (and maybe a build system). Think of this as your own
personal bootstrap.
  * Button - simple ui component. It requires no context, or anything to
    be loaded in your app.
  * Grid - Meta component for arranging other components or children
  * Form inputs - keep your UI consistent by defining form inputs here.
  * Avatar - Takes an image, and creates a specific size.
  * Loader - Spinner or progress bar to show throughout the application.

### Components that do not belong in ui.
UI components that are specific to something in your application belong in
components.
  * UserAvatar - maybe it contains a link to user profiles, has knowledge of the
    user model, etc...
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/ui/testUi/index.ts 1`] = `
"import { TestUi } from './testUi'

export default TestUi


"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/ui/testUi/testUi.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestUi} from './testUi';

storiesOf('ui/testUi', module)
  .add('with text', () => (
    <TestUi>Hello TestUi</TestUi>
  ));
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/ui/testUi/testUi.tsx 1`] = `
"import * as React from 'react'

export interface TestuiProps {
  children?: React.ReactNode
}
export const TestUi = (props: TestuiProps) => {
  return (
    <div> TestUi { props.children } </div>
  )
}


"
`;

exports[`generating ui should generate a new ui component: apr g ui --name testUi --autoLink 1`] = `
",
Loaded templates: <project-root>packages/apr-cli/_templates/
       added: src/ui/testUi/index.ts
       added: src/ui/testUi/testUi.tsx
       added: src/ui/testUi/testUi.story.tsx
,"
`;

exports[`generating ui should generate a new ui component: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/global.css",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/stories.test.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;
