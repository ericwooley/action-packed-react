// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generating ui should generate a new ui component: <project-root>playground/src/components/RootLayout/index.tsx 1`] = `
"import * as React from \\"react\\";
import styled from \\"styled-components\\";
const Wrapper = styled.div\`
  display: flex;
  flex-direction: row;
\`;
const Nav = styled.div\`
  flex: 0;
  padding: 10px;
  margin: 10px;
  min-width: 300px;
  border: 1px solid lightgreen;
  border-radius: 20px;
\`;
export default class RootLayout extends React.PureComponent {
  render() {
    return (
      <Wrapper>
        <Nav>
          <ul>
            <li>
              link 1
            </li>
            <li>
              link 2
            </li>
          </ul>
        </Nav>
        <div>{this.props.children}</div>
      </Wrapper>
    );
  }
}
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/components/testComponent/index.ts 1`] = `
"import { TestComponent } from './testComponent'

export default TestComponent


"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/components/testComponent/testComponent.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent} from './testComponent';

storiesOf('app//_components/testComponent', module)
  .add('with text', () => (
    <TestComponent>Hello TestComponent</TestComponent>
  ));
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/components/testComponent/testComponent.tsx 1`] = `
"import * as React from 'react'

export interface TestcomponentProps {
  children?: React.ReactNode
}
export const TestComponent = (props: TestcomponentProps) => {
  return (
    <div> TestComponent { props.children }</div>
  )
}


"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/ducks/index.ts 1`] = `
"// ðŸ‘‡ Add your reducers here ðŸ‘‡
export default {}

// ðŸ‘‡ Add your initial states here ðŸ‘‡
export const initialState = {

}
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/ducks/testDuck/testDuck.test.ts 1`] = `
"import { initialState, testDuck } from \\"./testDuck\\";

describe(\\"testDuck\\", () => {
  it(\\"should reset\\", () => {
    expect(testDuck(initialState, testDuck.actionCreators.reset(undefined)));
  });
});
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/ducks/testDuck/testDuck.ts 1`] = `
"import { createActionPack, createReducerFromActionPack } from \\"action-packed-react\\";

const ns = (type: string) => \`src/testDuck/\${type}\`

export const initialState = { };

type UIState = typeof initialState;
export const testDuck = createReducerFromActionPack(initialState, {
  reset: createActionPack<UIState, boolean>(ns(\\"RESET\\"), () => initialState)
});
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/sagas/index.ts 1`] = `
"import { all } from \\"redux-saga/effects\\";

/**
 * rootSaga to load any global sagas you want.
 *
 * Included are some common ones, you just need to uncomment them.
 */
export default function* rootSaga() {
  console.log(\\"saga initialized\\");
  yield all([
  ]);
}
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/sagas/testSaga.test.ts 1`] = `
"import { testSaga } from './testSaga';

// There are a lot of strategies for testing sagas
// https://redux-saga.js.org/docs/advanced/Testing.html
describe('testSaga',() => {
  it('should exist', () => {
    expect(testSaga).toBeTruthy()
  })
})
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/sagas/testSaga.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/redux/selectors/index.ts 1`] = `
"import { createSelector } from 'reselect'
import app from '../..'

"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import { createApp } from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    initialState,
    initialReducers,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/readme.md 1`] = `
"
# Routes
\`routes\` is a folder for holding other routes, which follows the
[fractal pattern](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af).

Each route contains:
  * a \`routes\` folder for sub routes.
  * a \`components\` folder for react components for this route.
  * a \`redux\` folder, for
    [ducks](https://github.com/erikras/ducks-modular-redux),
    [sagas](https://redux-saga.js.org/), and anything else related to redux.
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/testRoute/index.ts 1`] = `
"import parent from '../../'
import testRouteRoute from './route'
export default testRouteRoute(parent)
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/testRoute/layout.tsx 1`] = `
"import * as React from 'react'

interface TestrouteProps {
  children?: React.ReactChildren
}

const testRouteLayout = (props: TestrouteProps) => (
  <div>
    <h1>testRoute</h1>
    { props.children }
  </div>
)
export default testRouteLayout;
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/testRoute/redux/ducks/index.ts 1`] = `
"import { testDuck2, initialState as testDuck2InitialState } from './testDuck2/testDuck2'
/**
 * Run \`apr g duck --route src\` to add a duck
 */
export default {
 testDuck2
};
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/testRoute/redux/sagas/index.ts 1`] = `
"import { testSaga2 } from './testSaga2'
import { all, call } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([call(testSaga2)]);
}

"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/testRoute/redux/selectors/index.ts 1`] = `
"import testRoute from './testRoute';
export default testRoute;
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/testRoute/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRouteRoute from \\"./route\\";

export const route = testRouteRoute(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"app/testRoute\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/routes/testRoute/route.ts 1`] = `
"import { createRouteComposer } from 'action-packed-react';
import { Parent } from '../../route';
export const route = createRouteComposer('testRoute')
const testRouteRoute = (app: Parent) => {
  const testRouteRoute = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRouteRoute.setComponent(() => import('./layout'))
  testRouteRoute.register()
  return testRouteRoute;
}

export default testRouteRoute
export type Parent = ReturnType<typeof testRouteRoute>

"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/ui/readme.md 1`] = `
"# UI
\`ui\` is for reusable components, which should have 0 concept of anything else
 that is in your app.

## Examples
### Components that belong in ui.
UI components should be simple, pure, and require no context of the application.
Try to imagine that one day, you want to publish an npm package, based on your
ui elements. It should be as easy as copying this folder, and putting a
package.json file in it (and maybe a build system). Think of this as your own
personal bootstrap.
  * Button - simple ui component. It requires no context, or anything to
    be loaded in your app.
  * Grid - Meta component for arranging other components or children
  * Form inputs - keep your UI consistent by defining form inputs here.
  * Avatar - Takes an image, and creates a specific size.
  * Loader - Spinner or progress bar to show throughout the application.

### Components that do not belong in ui.
UI components that are specific to something in your application belong in
components.
  * UserAvatar - maybe it contains a link to user profiles, has knowledge of the
    user model, etc...
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/ui/testUi/index.ts 1`] = `
"import { TestUi } from './testUi'

export default TestUi


"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/ui/testUi/testUi.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestUi} from './testUi';

storiesOf('ui/testUi', module)
  .add('with text', () => (
    <TestUi>Hello TestUi</TestUi>
  ));
"
`;

exports[`generating ui should generate a new ui component: <project-root>playground/src/ui/testUi/testUi.tsx 1`] = `
"import * as React from 'react'

export interface TestuiProps {
  children?: React.ReactNode
}
export const TestUi = (props: TestuiProps) => {
  return (
    <div> TestUi { props.children } </div>
  )
}


"
`;

exports[`generating ui should generate a new ui component: apr g ui --name testUi --autoLink 1`] = `
",
Loaded templates: <project-root>apr-cli/_templates/
       added: src/ui/testUi/index.ts
       added: src/ui/testUi/testUi.tsx
       added: src/ui/testUi/testUi.story.tsx
,"
`;

exports[`generating ui should generate a new ui component: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;
