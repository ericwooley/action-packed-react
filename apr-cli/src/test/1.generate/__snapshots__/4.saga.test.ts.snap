// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/components/RootLayout/index.tsx 1`] = `
"import * as React from \\"react\\";
import styled from \\"styled-components\\";
const Wrapper = styled.div\`
  display: flex;
  flex-direction: row;
\`;
const Nav = styled.div\`
  flex: 0;
  padding: 10px;
  margin: 10px;
  min-width: 300px;
  border: 1px solid lightgreen;
  border-radius: 20px;
\`;
export default class RootLayout extends React.PureComponent {
  render() {
    return (
      <Wrapper>
        <Nav>
          <ul>
            <li>
              link 1
            </li>
            <li>
              link 2
            </li>
          </ul>
        </Nav>
        <div>{this.props.children}</div>
      </Wrapper>
    );
  }
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/components/testComponent/index.ts 1`] = `
"import { TestComponent } from './testComponent'

export default TestComponent


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/components/testComponent/testComponent.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent} from './testComponent';

storiesOf('app//_components/testComponent', module)
  .add('with text', () => (
    <TestComponent>Hello TestComponent</TestComponent>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/components/testComponent/testComponent.tsx 1`] = `
"import * as React from 'react'

export interface TestcomponentProps {
  children?: React.ReactNode
}
export const TestComponent = (props: TestcomponentProps) => {
  return (
    <div> TestComponent { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/ducks/index.ts 1`] = `
"import { testDuck, initialState as testDuckInitialState } from './testDuck/testDuck'
// ðŸ‘‡ Add your reducers here ðŸ‘‡
export default {
  testDuck
};

// ðŸ‘‡ Add your initial states here ðŸ‘‡
export const initialState = {
  testDuck: testDuckInitialState
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/sagas/index.ts 1`] = `
"import { testSaga } from './testSaga'
import { all, call } from \\"redux-saga/effects\\";

/**
 * rootSaga to load any global sagas you want.
 *
 * Included are some common ones, you just need to uncomment them.
 */
export default function* rootSaga() {
  console.log(\\"saga initialized\\");
  yield all([call(testSaga)]);
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/sagas/testSaga.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/redux/selectors/index.ts 1`] = `
"import { createSelector } from 'reselect'
import app from '../..'

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/readme.md 1`] = `
"
# Routes
\`routes\` is a folder for holding other routes, which follows the
[fractal pattern](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af).

Each route contains:
  * a \`routes\` folder for sub routes.
  * a \`components\` folder for react components for this route.
  * a \`redux\` folder, for
    [ducks](https://github.com/erikras/ducks-modular-redux),
    [sagas](https://redux-saga.js.org/), and anything else related to redux.
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/index.ts 1`] = `
"import parent from '../../'
import testRouteRoute from './route'
export default testRouteRoute(parent)
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/layout.tsx 1`] = `
"import * as React from 'react'

interface TestrouteProps {
  children?: React.ReactChildren
}

const testRouteLayout = (props: TestrouteProps) => (
  <div>
    <h1>testRoute</h1>
    { props.children }
  </div>
)
export default testRouteLayout;
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRouteRoute from \\"./route\\";

export const route = testRouteRoute(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"app/testRoute\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/routes/testRoute/route.ts 1`] = `
"import { createRouteComposer } from 'action-packed-react/routeMatcher';
import { Parent } from '../../route';
export const route = createRouteComposer('testRoute')
const testRouteRoute = (app: Parent) => {
  const testRouteRoute = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRouteRoute.setComponent(() => import('./layout'))
  testRouteRoute.register()
  return testRouteRoute;
}

export default testRouteRoute
export type Parent = ReturnType<typeof testRouteRoute>

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/ui/readme.md 1`] = `
"# UI
\`ui\` is for reusable components, which should have 0 concept of anything else
 that is in your app.

## Examples
### Components that belong in ui.
UI components should be simple, pure, and require no context of the application.
Try to imagine that one day, you want to publish an npm package, based on your
ui elements. It should be as easy as copying this folder, and putting a
package.json file in it (and maybe a build system). Think of this as your own
personal bootstrap.
  * Button - simple ui component. It requires no context, or anything to
    be loaded in your app.
  * Grid - Meta component for arranging other components or children
  * Form inputs - keep your UI consistent by defining form inputs here.
  * Avatar - Takes an image, and creates a specific size.
  * Loader - Spinner or progress bar to show throughout the application.

### Components that do not belong in ui.
UI components that are specific to something in your application belong in
components.
  * UserAvatar - maybe it contains a link to user profiles, has knowledge of the
    user model, etc...
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/ui/testUi/index.ts 1`] = `
"import { TestUi } from './testUi'

export default TestUi


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/ui/testUi/testUi.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestUi} from './testUi';

storiesOf('ui/testUi', module)
  .add('with text', () => (
    <TestUi>Hello TestUi</TestUi>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/ui/testUi/testUi.tsx 1`] = `
"import * as React from 'react'

export interface TestuiProps {
  children?: React.ReactNode
}
export const TestUi = (props: TestuiProps) => {
  return (
    <div> TestUi { props.children } </div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes: apr g saga --name testSaga2 --route src/routes/testRoute --autoLink 1`] = `
",
Loaded templates: <project-root>apr-cli/_templates/
       added: src/routes/testRoute/redux/sagas/testSaga2.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga based on testRoutes: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/components/testComponent2/index.ts 1`] = `
"import { TestComponent2 } from './testComponent2'

export default TestComponent2


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx 1`] = `
"import * as React from 'react'
import { storiesOf } from '@storybook/react';
import {TestComponent2} from './testComponent2';

storiesOf('app/testRoute/_components/testComponent2', module)
  .add('with text', () => (
    <TestComponent2>Hello TestComponent2</TestComponent2>
  ));
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx 1`] = `
"import * as React from 'react'

export interface Testcomponent2Props {
  children?: React.ReactNode
}
export const TestComponent2 = (props: Testcomponent2Props) => {
  return (
    <div> TestComponent2 { props.children }</div>
  )
}


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/ducks/index.ts 1`] = `
"import { testDuck2, initialState as testDuck2InitialState } from './testDuck2/testDuck2'
/**
 * Run \`apr g duck --route src\` to add a duck
 */
export default {
 testDuck2
};
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/sagas/index.ts 1`] = `
"import { testSaga2 } from './testSaga2'
import { all, call } from \\"redux-saga/effects\\";

export default function* rootSaga() {
  yield all([call(testSaga2)]);
}

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts 1`] = `
"import { call } from 'redux-saga/effects';

export function* testSaga2 () {
  yield call(() => console.log('my new saga'));
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/selectors/index.ts 1`] = `
"import testRoute from './testRoute';
export default testRoute;
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts 1`] = `
"import { createSelector } from 'reselect'
import route from '../../'

const identity = createSelector(route.baseSelector, (routeState) => routeState);

export default {
  identity
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts 1`] = `
"import parent from '../../'
import testRoute2Route from './route'
export default testRoute2Route(parent)
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx 1`] = `
"import * as React from 'react'

interface Testroute2Props {
  children?: React.ReactChildren
}

const testRoute2Layout = (props: Testroute2Props) => (
  <div>
    <h1>testRoute2</h1>
    { props.children }
  </div>
)
export default testRoute2Layout;
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { route as parent } from \\"../../route.story\\";
import testRoute2Route from \\"./route\\";

export const route = testRoute2Route(parent);
const AppComponent = route.navigateOnMount({}, true)
storiesOf(\\"apptestRoute/testRoute2\\", module)
  .add(\\"Default Route\\", () => {
    return <AppComponent />;
  });

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts 1`] = `
"import { createRouteComposer } from 'action-packed-react/routeMatcher';
import { Parent } from '../../route';
export const route = createRouteComposer('testRoute2')
const testRoute2Route = (app: Parent) => {
  const testRoute2Route = app.createSubRoute(
    route,
    () => import('./redux/ducks')
  )
  testRoute2Route.setComponent(() => import('./layout'))
  testRoute2Route.register()
  return testRoute2Route;
}

export default testRoute2Route
export type Parent = ReturnType<typeof testRoute2Route>

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: apr g saga --name testSaga3 --route src/routes/testRoute/routes/testRoute2 --autoLink 1`] = `
",
Loaded templates: <project-root>apr-cli/_templates/
       added: src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;

exports[`generating saga should generate a new saga: <project-root>playground/apr.config.js 1`] = `
"module.exports = {
  /* Webpack dev server options */
  // port: 8080,                         // Webpack dev server port
  // host: \\"localhost\\",                  // Webpack dev server host
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/html/index.html 1`] = `
"<!doctype html>
<html>

<head>
    <meta charset=\\"utf-8\\">
    <title>Webpack App</title>
    <meta name=\\"viewport\\" content=\\"width=device-width,initial-scale=1\\">
</head>

<body>
    <div id=\\"root\\"></div>
</body>

</html>"
`;

exports[`generating saga should generate a new saga: <project-root>playground/package.json 1`] = `
"{
  \\"name\\": \\"playground\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"My action-packed-react app\\",
  \\"main\\": \\"webpack.config.js\\",
  \\"scripts\\": {
    \\"prebuild\\": \\"rm -rf dist\\",
    \\"build\\": \\"apr build\\",
    \\"start\\": \\"apr dev\\",
    \\"lint\\": \\"tslint --project tsconfig.json\\",
    \\"test\\": \\"jest --passWithNoTests\\"
  },
  \\"dependencies\\":{
    \\"action-packed-react\\": \\"0.0.0\\",
    \\"history\\": \\"^4.9.0\\",
    \\"react\\": \\"^16.8.6\\",
    \\"react-dom\\": \\"^16.8.6\\",
    \\"styled-components\\": \\"^4.3.2\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"MIT\\",
  \\"devDependencies\\": {
    \\"@storybook/addon-info\\": \\"^5.1.11\\",
    \\"@storybook/addon-storyshots\\": \\"^5.2.4\\",
    \\"@storybook/react\\": \\"^5.1.11\\",
    \\"@types/history\\": \\"^4.7.2\\",
    \\"@types/react\\": \\"^16.8.24\\",
    \\"@types/react-dom\\": \\"^16.8.5\\",
    \\"@types/storybook__react\\": \\"^4.0.2\\",
    \\"@types/styled-components\\": \\"^4.1.18\\",
    \\"apr-cli\\": \\"0.0.0\\",
    \\"babel-jest\\": \\"^24.9.0\\",
    \\"jest\\": \\"^24.9.0\\"
  }
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import { createApp } from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    initialState,
    initialReducers,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/tsconfig.json 1`] = `
"{
  \\"compilerOptions\\": {
    \\"target\\": \\"es5\\",
    \\"lib\\": [\\"es2015\\", \\"es2016\\", \\"es2017\\", \\"dom\\"],
    \\"strict\\": true,
    \\"allowSyntheticDefaultImports\\": true,
    \\"experimentalDecorators\\": true,
    \\"emitDecoratorMetadata\\": true,
    \\"jsx\\": \\"react\\",
    \\"typeRoots\\": [\\"node_modules/@types\\", \\"src/types\\"],
    \\"rootDirs\\": [\\"src\\"],
    \\"baseUrl\\": \\"src\\",
    \\"paths\\": {
      \\"app\\": [\\"index\\"],
      \\"app/*\\": [\\"*\\"]
    }
  },
  \\"exclude\\": [\\"**/*.test.ts*\\", \\"\\"]
}
"
`;

exports[`generating saga should generate a new saga: apr g saga --name testSaga --route src --autoLink 1`] = `
",
Loaded templates: <project-root>apr-cli/_templates/
       added: src/redux/sagas/testSaga.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;
