// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/apr.config.js 1`] = `
"module.exports = {
  /* Webpack dev server options */
  // port: 8080,                         // Webpack dev server port
  // host: \\"localhost\\",                  // Webpack dev server host
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/html/index.html 1`] = `
"<!doctype html>
<html>

<head>
    <meta charset=\\"utf-8\\">
    <title>Webpack App</title>
    <meta name=\\"viewport\\" content=\\"width=device-width,initial-scale=1\\">
</head>

<body>
    <div id=\\"root\\"></div>
</body>

</html>"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/package.json 1`] = `
"{
  \\"name\\": \\"playground\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"My action-packed-react app\\",
  \\"main\\": \\"webpack.config.js\\",
  \\"scripts\\": {
    \\"prebuild\\": \\"rm -rf dist\\",
    \\"build\\": \\"apr build\\",
    \\"start\\": \\"apr dev\\",
    \\"lint\\": \\"tslint --project tsconfig.json\\",
    \\"test\\": \\"jest --passWithNoTests\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"MIT\\",
  \\"dependencies\\": {
    \\"action-packed-react\\": \\"<project-root>action-packed-react\\",
    \\"apr-cli\\": \\"<project-root>apr-cli\\",
    \\"history\\": \\"^4.10.1\\",
    \\"react\\": \\"^16.12.0\\",
    \\"react-dom\\": \\"^16.12.0\\",
    \\"styled-components\\": \\"^4.4.1\\"
  },
  \\"devDependencies\\": {
    \\"@storybook/addon-info\\": \\"^5.2.8\\",
    \\"@storybook/addon-storyshots\\": \\"^5.2.8\\",
    \\"@storybook/react\\": \\"^5.2.8\\",
    \\"@types/history\\": \\"^4.7.3\\",
    \\"@types/react\\": \\"^16.9.15\\",
    \\"@types/react-dom\\": \\"^16.9.4\\",
    \\"@types/styled-components\\": \\"^4.4.0\\",
    \\"babel-jest\\": \\"^24.9.0\\",
    \\"jest\\": \\"^24.9.0\\"
  }
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import { createApp } from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    initialState,
    initialReducers,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating saga should generate a new saga based on testRoutes: <project-root>playground/tsconfig.json 1`] = `
"{
  \\"compilerOptions\\": {
    \\"target\\": \\"es5\\",
    \\"lib\\": [\\"es2015\\", \\"es2016\\", \\"es2017\\", \\"dom\\"],
    \\"strict\\": true,
    \\"allowSyntheticDefaultImports\\": true,
    \\"experimentalDecorators\\": true,
    \\"emitDecoratorMetadata\\": true,
    \\"jsx\\": \\"react\\",
    \\"typeRoots\\": [\\"node_modules/@types\\", \\"src/types\\"],
    \\"rootDirs\\": [\\"src\\"],
    \\"baseUrl\\": \\"src\\",
    \\"paths\\": {
      \\"app\\": [\\"index\\"],
      \\"app/*\\": [\\"*\\"]
    }
  },
  \\"exclude\\": [\\"**/*.test.ts*\\", \\"\\"]
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes: apr g saga --name testSaga2 --route src/routes/testRoute --autoLink 1`] = `
",
Loaded templates: <project-root>apr-cli/_templates/
       added: src/routes/testRoute/redux/sagas/testSaga2.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga based on testRoutes: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;

exports[`generating saga should generate a new saga based on testRoutes: files-changed 1`] = `
Array [
  "<project-root>playground/apr.config.js",
  "<project-root>playground/package.json",
  "<project-root>playground/tsconfig.json",
  "<project-root>playground/html/index.html",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
]
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/apr.config.js 1`] = `
"module.exports = {
  /* Webpack dev server options */
  // port: 8080,                         // Webpack dev server port
  // host: \\"localhost\\",                  // Webpack dev server host
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/html/index.html 1`] = `
"<!doctype html>
<html>

<head>
    <meta charset=\\"utf-8\\">
    <title>Webpack App</title>
    <meta name=\\"viewport\\" content=\\"width=device-width,initial-scale=1\\">
</head>

<body>
    <div id=\\"root\\"></div>
</body>

</html>"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/package.json 1`] = `
"{
  \\"name\\": \\"playground\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"My action-packed-react app\\",
  \\"main\\": \\"webpack.config.js\\",
  \\"scripts\\": {
    \\"prebuild\\": \\"rm -rf dist\\",
    \\"build\\": \\"apr build\\",
    \\"start\\": \\"apr dev\\",
    \\"lint\\": \\"tslint --project tsconfig.json\\",
    \\"test\\": \\"jest --passWithNoTests\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"MIT\\",
  \\"dependencies\\": {
    \\"action-packed-react\\": \\"<project-root>action-packed-react\\",
    \\"apr-cli\\": \\"<project-root>apr-cli\\",
    \\"history\\": \\"^4.10.1\\",
    \\"react\\": \\"^16.12.0\\",
    \\"react-dom\\": \\"^16.12.0\\",
    \\"styled-components\\": \\"^4.4.1\\"
  },
  \\"devDependencies\\": {
    \\"@storybook/addon-info\\": \\"^5.2.8\\",
    \\"@storybook/addon-storyshots\\": \\"^5.2.8\\",
    \\"@storybook/react\\": \\"^5.2.8\\",
    \\"@types/history\\": \\"^4.7.3\\",
    \\"@types/react\\": \\"^16.9.15\\",
    \\"@types/react-dom\\": \\"^16.9.4\\",
    \\"@types/styled-components\\": \\"^4.4.0\\",
    \\"babel-jest\\": \\"^24.9.0\\",
    \\"jest\\": \\"^24.9.0\\"
  }
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import { createApp } from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    initialState,
    initialReducers,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating saga should generate a new saga based on testRoutes2: <project-root>playground/tsconfig.json 1`] = `
"{
  \\"compilerOptions\\": {
    \\"target\\": \\"es5\\",
    \\"lib\\": [\\"es2015\\", \\"es2016\\", \\"es2017\\", \\"dom\\"],
    \\"strict\\": true,
    \\"allowSyntheticDefaultImports\\": true,
    \\"experimentalDecorators\\": true,
    \\"emitDecoratorMetadata\\": true,
    \\"jsx\\": \\"react\\",
    \\"typeRoots\\": [\\"node_modules/@types\\", \\"src/types\\"],
    \\"rootDirs\\": [\\"src\\"],
    \\"baseUrl\\": \\"src\\",
    \\"paths\\": {
      \\"app\\": [\\"index\\"],
      \\"app/*\\": [\\"*\\"]
    }
  },
  \\"exclude\\": [\\"**/*.test.ts*\\", \\"\\"]
}
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: apr g saga --name testSaga3 --route src/routes/testRoute/routes/testRoute2 --autoLink 1`] = `
",
Loaded templates: <project-root>apr-cli/_templates/
       added: src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga based on testRoutes2: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/testSaga2.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/testSaga3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;

exports[`generating saga should generate a new saga based on testRoutes2: files-changed 1`] = `
Array [
  "<project-root>playground/apr.config.js",
  "<project-root>playground/package.json",
  "<project-root>playground/tsconfig.json",
  "<project-root>playground/html/index.html",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
]
`;

exports[`generating saga should generate a new saga: <project-root>playground/apr.config.js 1`] = `
"module.exports = {
  /* Webpack dev server options */
  // port: 8080,                         // Webpack dev server port
  // host: \\"localhost\\",                  // Webpack dev server host
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/html/index.html 1`] = `
"<!doctype html>
<html>

<head>
    <meta charset=\\"utf-8\\">
    <title>Webpack App</title>
    <meta name=\\"viewport\\" content=\\"width=device-width,initial-scale=1\\">
</head>

<body>
    <div id=\\"root\\"></div>
</body>

</html>"
`;

exports[`generating saga should generate a new saga: <project-root>playground/package.json 1`] = `
"{
  \\"name\\": \\"playground\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"My action-packed-react app\\",
  \\"main\\": \\"webpack.config.js\\",
  \\"scripts\\": {
    \\"prebuild\\": \\"rm -rf dist\\",
    \\"build\\": \\"apr build\\",
    \\"start\\": \\"apr dev\\",
    \\"lint\\": \\"tslint --project tsconfig.json\\",
    \\"test\\": \\"jest --passWithNoTests\\"
  },
  \\"author\\": \\"\\",
  \\"license\\": \\"MIT\\",
  \\"dependencies\\": {
    \\"action-packed-react\\": \\"<project-root>action-packed-react\\",
    \\"apr-cli\\": \\"<project-root>apr-cli\\",
    \\"history\\": \\"^4.10.1\\",
    \\"react\\": \\"^16.12.0\\",
    \\"react-dom\\": \\"^16.12.0\\",
    \\"styled-components\\": \\"^4.4.1\\"
  },
  \\"devDependencies\\": {
    \\"@storybook/addon-info\\": \\"^5.2.8\\",
    \\"@storybook/addon-storyshots\\": \\"^5.2.8\\",
    \\"@storybook/react\\": \\"^5.2.8\\",
    \\"@types/history\\": \\"^4.7.3\\",
    \\"@types/react\\": \\"^16.9.15\\",
    \\"@types/react-dom\\": \\"^16.9.4\\",
    \\"@types/styled-components\\": \\"^4.4.0\\",
    \\"babel-jest\\": \\"^24.9.0\\",
    \\"jest\\": \\"^24.9.0\\"
  }
}
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/index.tsx 1`] = `
"import * as React from \\"react\\";
import { routeFactory } from \\"./route\\";
import { render } from \\"react-dom\\";
import { createHashHistory } from \\"history\\";
const el = document.getElementById(\\"root\\");
if (!el) throw new Error(\\"no el\\");

const app = routeFactory({ history: createHashHistory() });

render(<app.AppComponent />, el);
export default app
"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/route.story.tsx 1`] = `
"import * as React from \\"react\\";
import { storiesOf } from \\"@storybook/react\\";
import { routeFactory } from \\"./route\\";
import { createMemoryHistory } from \\"history\\";

export const history = createMemoryHistory();
export const route = routeFactory(
  { history }
);

storiesOf(\\"app\\", module).add(\\"Root\\", () => <route.NavigateOnMount />);

"
`;

exports[`generating saga should generate a new saga: <project-root>playground/src/route.tsx 1`] = `
"import * as React from \\"react\\";
import { createApp } from \\"action-packed-react\\";
import { History } from \\"history\\";
import initialReducers, { initialState } from \\"./redux/ducks\\";

export const routeFactory = ({ history }: { history: History }) => {
  const app = createApp({
    composeEnhancers: (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
    history,
    initialState,
    initialReducers,
    RouteNotFoundComponent: () => <div>Not Found</div>,
    LoadingComponent: () => <h3>Loading...</h3>,
    saga: import(\\"./redux/sagas/index\\"),
    layout: import(\\"./components/RootLayout\\")
  });

  app.init().catch(e => console.error(\\"Error Starting application\\", e));
  return app;
};
export type Parent = ReturnType<typeof routeFactory>;


"
`;

exports[`generating saga should generate a new saga: <project-root>playground/tsconfig.json 1`] = `
"{
  \\"compilerOptions\\": {
    \\"target\\": \\"es5\\",
    \\"lib\\": [\\"es2015\\", \\"es2016\\", \\"es2017\\", \\"dom\\"],
    \\"strict\\": true,
    \\"allowSyntheticDefaultImports\\": true,
    \\"experimentalDecorators\\": true,
    \\"emitDecoratorMetadata\\": true,
    \\"jsx\\": \\"react\\",
    \\"typeRoots\\": [\\"node_modules/@types\\", \\"src/types\\"],
    \\"rootDirs\\": [\\"src\\"],
    \\"baseUrl\\": \\"src\\",
    \\"paths\\": {
      \\"app\\": [\\"index\\"],
      \\"app/*\\": [\\"*\\"]
    }
  },
  \\"exclude\\": [\\"**/*.test.ts*\\", \\"\\"]
}
"
`;

exports[`generating saga should generate a new saga: apr g saga --name testSaga --route src --autoLink 1`] = `
",
Loaded templates: <project-root>apr-cli/_templates/
       added: src/redux/sagas/testSaga.ts
,Warning: The 'await-promise' rule requires type information.
Warning: The 'deprecation' rule requires type information.
Warning: The 'no-floating-promises' rule requires type information.
Warning: The 'no-unnecessary-qualifier' rule requires type information.
Warning: The 'no-unnecessary-type-assertion' rule requires type information.
Warning: The 'strict-type-predicates' rule requires type information.
"
`;

exports[`generating saga should generate a new saga: file-list 1`] = `
Array [
  "<project-root>playground/src/components/RootLayout/index.tsx",
  "<project-root>playground/src/components/testComponent/index.ts",
  "<project-root>playground/src/components/testComponent/testComponent.story.tsx",
  "<project-root>playground/src/components/testComponent/testComponent.tsx",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/redux/ducks/index.ts",
  "<project-root>playground/src/redux/ducks/testDuck/testDuck.ts",
  "<project-root>playground/src/redux/sagas/index.ts",
  "<project-root>playground/src/redux/sagas/testSaga.ts",
  "<project-root>playground/src/redux/selectors/index.ts",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
  "<project-root>playground/src/routes/readme.md",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/index.ts",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.story.tsx",
  "<project-root>playground/src/routes/testRoute/components/testComponent2/testComponent2.tsx",
  "<project-root>playground/src/routes/testRoute/index.ts",
  "<project-root>playground/src/routes/testRoute/layout.tsx",
  "<project-root>playground/src/routes/testRoute/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/ducks/testDuck2/testDuck2.ts",
  "<project-root>playground/src/routes/testRoute/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/redux/selectors/testRoute.ts",
  "<project-root>playground/src/routes/testRoute/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/components/testComponent3/testComponent3.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/ducks/testDuck3/testDuck3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/redux/selectors/testRoute2.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/route.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/layout.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/ducks/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/sagas/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/index.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/redux/selectors/testRoute3.ts",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.story.tsx",
  "<project-root>playground/src/routes/testRoute/routes/testRoute2/routes/testRoute3/route.ts",
  "<project-root>playground/src/ui/readme.md",
  "<project-root>playground/src/ui/testUi/index.ts",
  "<project-root>playground/src/ui/testUi/testUi.story.tsx",
  "<project-root>playground/src/ui/testUi/testUi.tsx",
]
`;

exports[`generating saga should generate a new saga: files-changed 1`] = `
Array [
  "<project-root>playground/apr.config.js",
  "<project-root>playground/package.json",
  "<project-root>playground/tsconfig.json",
  "<project-root>playground/html/index.html",
  "<project-root>playground/src/index.tsx",
  "<project-root>playground/src/route.story.tsx",
  "<project-root>playground/src/route.tsx",
]
`;
